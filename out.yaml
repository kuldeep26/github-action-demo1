---
# Source: knative-helm-chart/templates/ecr-external-secret.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-ecr-sa
  namespace: hello-world
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/your-role
---
# Source: knative-helm-chart/templates/service.yaml
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: hello
  namespace: hello-world
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/min-scale: "1"
    spec:
      containers:
        - image: 975049981142.dkr.ecr.us-east-1.amazonaws.com/ngnix-knative:1.2.1
          ports:
            - containerPort: 80
          name: ngnix
          envFrom:
            - secretRef:
                name: secret-to-be-created
          env:
            - name: SERVICE
              value: "http://syncron.com"
      imagePullSecrets:
        - name: ecr-secret
---
# Source: knative-helm-chart/templates/cron.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-secret-refresh
  namespace: hello-world
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: ecr-secret-refresh
            image: amazon/aws-cli
            args:
              - /bin/sh
              - -c
              - |
                aws ecr get-login-password --region us-east-1 | \
                kubectl create secret docker-registry ecr-registry-secret \
                  --docker-server=637423660652.dkr.ecr.us-east-1.amazonaws.com \
                  --docker-username=AWS \
                  --docker-password="$(cat)" \
                  --namespace hello-world --dry-run=client -o yaml | \
                kubectl apply -f -
          restartPolicy: OnFailure
---
# Source: knative-helm-chart/templates/namespace.yaml
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: hello-world
#   labels:
#     name: hello-world
---
# Source: knative-helm-chart/templates/domainmapping.yaml
apiVersion: networking.internal.knative.dev/v1alpha1
kind: ClusterDomainClaim
metadata:
  name: test.975049981142.realhandsonlabs.net
spec:
  namespace: hello-world
---
# Source: knative-helm-chart/templates/ecr-external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: ecr-secret-store
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-ecr-sa
            namespace: hello-world
---
# Source: knative-helm-chart/templates/external-secrets.yaml
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: k8s-native-external-secret
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: schema-registry-service-account
            namespace: hello-world
---
# Source: knative-helm-chart/templates/domainmapping.yaml
apiVersion: serving.knative.dev/v1beta1
kind: DomainMapping
metadata:
  name: test.975049981142.realhandsonlabs.net
  namespace: hello-world
spec:
  ref:
    name: hello
    kind: Service
    apiVersion: serving.knative.dev/v1
---
# Source: knative-helm-chart/templates/ecr-external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ecr-token-secret
  namespace: hello-world
spec:
  refreshInterval: 5h
  secretStoreRef:
    name: ecr-secret-store
    kind: ClusterSecretStore
  target:
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: '{"auths":{"654654326569.dkr.ecr.us-east-1.amazonaws.com":{"username":"AWS","password":"stdin","auth":"QVdTOnN0ZGlu"}}}'
    name: ecr-secret
  data:
    - secretKey: ecr.password
      remoteRef:
        key: ecr-secret-key
---
# Source: knative-helm-chart/templates/external-secrets.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: k8s-external-secret
  namespace: hello-world  # Ensure the namespace is correct
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: k8s-native-external-secret
    kind: ClusterSecretStore
  target:
    name: secret-to-be-created
    creationPolicy: Owner
  data:
    - secretKey: mysql_pass
      remoteRef:
        key: rds!db-d5b17f88-29d9-4f57-8b73-6e8a460077df
        property: password

